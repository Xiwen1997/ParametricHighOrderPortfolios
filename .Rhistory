)) + scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x)))+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + labs(title = "Gap v.s. computational time (N=100)") +
theme(axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=12,face="bold"),
plot.title = element_text(size=12), legend.position = c(.84,.32),
legend.text = element_text( size=10, face="bold"))
library(ParametricHighOrderPortfolios)
library(ParametricHighOrderPortfolios)
use_testthat()
use_testthat()
library(devtools)
use_testthat()
use_test()
library(ParametricHighOrderPortfolios)
args(fit_ghMST)
nu_lb(1)
runif(1)
library(testthat)
X_parameters <- fit_ghMST(X50, nu_lb = 8.5 + runif(1))
X_moments <- Compute_equivalent_moments(X_parameters)
w <-  runif(50)
w <- w/sum(w)
X_parameters$mu + X_parameters$a$a11 * X_parameters$gamma
t(w) %*% as.vector(X_parameters$mu + X_parameters$a$a11 * X_parameters$gamma)
t(w) %*% X_moments$mu
phi1_skewt <- as.numeric(t(w) %*% as.vector(X_parameters$mu + X_parameters$a$a11 * X_parameters$gamma))
phi1_np <- as.numeric(t(w) %*% X_moments$mu)
expect_equal(phi1_skewt, phi1_np)
help(expect_equal)
as.numeric(X_parameters$a$a21 * t(w) %*% X_parameters$scatter %*% w + X_parameters$a$a22 * ((t(w) %*% X_parameters$gamma) ** 2))
phi2_skewt <- as.numeric(X_parameters$a$a21 * t(w) %*% X_parameters$scatter %*% w + X_parameters$a$a22 * ((t(w) %*% X_parameters$gamma) ** 2))
phi2_np <- as.numeric(t(w) %*% X_moments$Sgm %*% w)
expect_equal(phi2_skewt, phi2_np)
phi3_skewt <- as.numeric(parameters$a$a31 * ((t(w) %*% parameters$gamma) ** 3) + parameters$a$a32 * (t(w) %*% parameters$gamma) * ( t(w) %*% (parameters$scatter) %*% w) )
phi3_np <- as.numeric(t(w) %*% X_moments$Phi_mat %*% (w %x% w))
expect_equal(phi3_skewt, phi3_np)
phi3_skewt <- as.numeric(X_parameters$a$a31 * ((t(w) %*% X_parameters$gamma) ** 3) + X_parameters$a$a32 * (t(w) %*% X_parameters$gamma) * ( t(w) %*% (X_parameters$scatter) %*% w) )
phi3_np <- as.numeric(t(w) %*% X_moments$Phi_mat %*% (w %x% w))
expect_equal(phi3_skewt, phi3_np)
phi3_skewt
phi3_np
library(ParametricHighOrderPortfolios)
use_test()
library(fitHeavyTail)
load("fit_ghMST_check.RData")
getwd()
load("~/OneDrive/Higher Order Portfolio Optimizations/Code/ParametricHighOrderPortfolios/tests/testthat/fit_ghMST_check.RData")
ghMST_model <- fit_ghMST(X50, nu_lb = 9)
expect_equal(ghMST_model[c("mu", "gamma", "scatter", "nu", "mean")],
ghMST_model_check[c("mu", "gamma", "scatter", "nu", "mean")],
tolerance = 1e-5)
ghMST_model$mu - ghMST_model_check$mu
expect_equal(ghMST_model$mu, ghMST_model_check$mu)
expect_equal(ghMST_model$mu, ghMST_model_check$mu, tolerance = 1e-5)
expect_equal(ghMST_model$mu, ghMST_model_check$mu, tolerance = 1e-4)
expect_equal(ghMST_model$mu, ghMST_model_check$mu, tolerance = 1e-3)
expect_equal(ghMST_model$mu, ghMST_model_check$mu, tolerance = 1e-4)
ghMST_model <- fit_ghMST(X50, nu_lb = 9, max_iter = 10000)
expect_equal(ghMST_model$mu, ghMST_model_check$mu, tolerance = 1e-4)
ghMST_model <- fit_ghMST(X50, nu_lb = 9, PXEM = FALSE, max_iter = 10000)
expect_equal(ghMST_model[c("mu", "gamma", "scatter", "nu", "mean")],
ghMST_model_check[c("mu", "gamma", "scatter", "nu", "mean")],
tolerance = 1e-4)
ghMST_model$nu
ghMST_model_check$nu
expect_equal(ghMST_model[c("mu", "gamma", "scatter", "nu")],
ghMST_model_check[c("mu", "gamma", "scatter", "nu")],
tolerance = 1e-4)
expect_equal(ghMST_model[c("mu", "gamma", "scatter", "nu")],
ghMST_model_check[c("mu", "gamma", "scatter", "nu")],
tolerance = 1e-5)
X_moments
getgrad(w0, getgrad)
getgrad <- function(w, non_para_mats) rbind(non_para_mats$mu, 2*w%*%non_para_mats$Sgm, as.vector(PerformanceAnalytics_derportm3(w, non_para_mats$Phi)), as.vector(PerformanceAnalytics_derportm4(w, non_para_mats$Psi)))  # gradients computing function
obj_value <- function(w, lambda = c(1,1,1,1), non_para_mats) {
grads <- getgrad(w, non_para_mats)
return(sum(lambda * as.vector(grads %*% w) / c(-1, 2, -3, 4)))
}
nabla_f <- function(w, lambda = c(1,1,1,1), non_para_mats) {
grads <- getgrad(w, non_para_mats)
return(as.vector(- lambda[1] * non_para_mats$mu + lambda[2] * grads[2,] - lambda[3] * grads[3,] +  lambda[4] * grads[4,]))
}
#'
#' @param lambda Numerical vector of length 4 indicating the weights of first four moments.
#' @param X_moments List of moment parameters, see \code{\link{estimate_moments}}.
#' @param w0 Numerical vector indicating the initial value of portfolio weights.
#'
#' @return A list containing the following elements:
#' \item{\code{w}}{Optimal portfolio vector.}#'
#'
#' @import nloptr
#' @export
solve_MVSK_nloptr_non_parametric(lambda, X_moments, w0){
getgrad <- function(w, non_para_mats) rbind(non_para_mats$mu, 2*w%*%non_para_mats$Sgm, as.vector(PerformanceAnalytics_derportm3(w, non_para_mats$Phi)), as.vector(PerformanceAnalytics_derportm4(w, non_para_mats$Psi)))  # gradients computing function
obj_value <- function(w, lambda = c(1,1,1,1), non_para_mats) {
grads <- getgrad(w, non_para_mats)
return(sum(lambda * as.vector(grads %*% w) / c(-1, 2, -3, 4)))
}
nabla_f <- function(w, lambda = c(1,1,1,1), non_para_mats) {
grads <- getgrad(w, non_para_mats)
return(as.vector(- lambda[1] * non_para_mats$mu + lambda[2] * grads[2,] - lambda[3] * grads[3,] +  lambda[4] * grads[4,]))
}
}
getgrad(w0, X_moments)
w0 <- rep(1/N, N)
getgrad(w0, X_moments)
N <- 50
w0 <- rep(1/N, N)
getgrad(w0, X_moments)
obj_value <- function(w, lambda, X_moments) {
obj <- 0
obj <- obj - lambda[1] * as.numeric(t(w) %*% X_moments$mu)
obj <- obj + lambda[2] * as.numeric(t(w) %*% X_moments$Sgm %*% w)
obj <- obj - lambda[3] * as.numeric(t(w) %*% X_moments$Phi_mat %*% (w %x% w))
obj <- obj + lambda[4] * as.numeric(t(w) %*% X_moments$Psi_mat %*% (w %x% w %x% w))
return(obj)
}
obj_value(c(1,1,1,1), X_moments, w0)
X_moments$mu
w0
obj_value(c(1,1,1,1), X_moments, w0)
X_moments$Phi_mat
w <- w0
as.numeric(t(w) %*% X_moments$mu)
as.numeric(t(w) %*% X_moments$Sgm %*% w)
as.numeric(t(w) %*% X_moments$Phi_mat %*% (w %x% w))
as.numeric(t(w) %*% X_moments$Psi_mat %*% (w %x% w %x% w))
obj_value(w0, lambda, X_moments)
lambda <- c(1,2,3,4)
obj_value(w0, lambda, X_moments)
library(ParametricHighOrderPortfolios)
library(ParametricHighOrderPortfolios)
solve_MVSK_nloptr_non_parametric(lambda, X_moments, w0)
use_test()
args(solve_MVSK_nloptr_non_parametric)
X <- X50[1:10,]
w0 <- rep(1/10, 10)
X_moments <- estimate_moments(X)
lambda <- c(1, 4, 10, 20)
nlopt_resluts <- solve_MVSK_nloptr_non_parametric(lambda, X_moments, w0)
X_moments$mu
X
dim(X)
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_moments <- estimate_moments(X)
lambda <- c(1, 4, 10, 20)
nlopt_resluts <- solve_MVSK_nloptr_non_parametric(lambda, X_moments, w0)
w0
X_moments$mu
X_moments$Sgm
#' @param X_moments List of moment parameters, see \code{\link{estimate_moments}}.
#' @param w0 Numerical vector indicating the initial value of portfolio weights.
#'
#' @return A list containing the following elements:
#' \item{\code{w_optimal}}{Optimal portfolio vector.}
#' \item{\code{obj_optimal}}{Optimal objective value.}
#' \item{\code{cpu_time}}{Computational time.}
#'
#' @import nloptr
#' @export
solve_MVSK_nloptr_non_parametric <- function(lambda, X_moments, w0){
N <- length(w0)
start_time <- proc.time()[3]
obj_value <- function(w, lambda, X_moments) {
obj <- 0
obj <- obj - lambda[1] * as.numeric(t(w) %*% X_moments$mu)
obj <- obj + lambda[2] * as.numeric(t(w) %*% X_moments$Sgm %*% w)
obj <- obj - lambda[3] * as.numeric(t(w) %*% X_moments$Phi_mat %*% (w %x% w))
obj <- obj + lambda[4] * as.numeric(t(w) %*% X_moments$Psi_mat %*% (w %x% w %x% w))
return(obj)
}
nabla_f <- function(w, lambda, X_moments) {
N <- length(w)
grads <- rep(0, N)
grads <- grads - lambda[1] * as.vector(X_moments$mu)
grads <- grads + lambda[2] * 2 * as.vector(X_moments$Sgm %*% w)
grads <- grads - lambda[3] * 3 * as.vector(X_moments$Phi_mat %*% (w %x% w))
grads <- grads + lambda[4] * 4 * as.vector(X_moments$Psi_mat %*% (w %x% w %x% w))
return(grads)
}
eval_g_eq <- function(w, lambda, X_moments) {
constr <- c(sum(w)-1)
grad <- c(rep(1, N))
return( list( "constraints"=constr, "jacobian"=grad ) )
}
local_opts <- list( "algorithm" = "NLOPT_LD_SLSQP",
"xtol_rel"=1.0e-14,"maxeval"=2500)
res <- nloptr(x0 = c(w0),
eval_f=obj_value,
eval_grad_f=nabla_f,
lb = c(rep(0,N)),
ub = c(rep(Inf,N)),
eval_g_eq = eval_g_eq,
opts = list("algorithm" = "NLOPT_LD_SLSQP",    maxeval = 2500, "xtol_rel"=1.0e-14,
"local_opts" = local_opts ),
lambda = lambda,
X_moments = X_moments
)
w_optimal <- res$solution
cpu_time <- as.numeric(proc.time()[3] - start_time)
obj_optimal <- obj_value(w_optimal, lambda, X_moments)
return(list("w_optimal"   = w_optimal,
"obj_optimal" = obj_optimal,
"cpu_time"    = cpu_time))
}
nlopt_resluts <- solve_MVSK_nloptr_non_parametric(lambda, X_moments, w0)
library(nloptr)
nlopt_resluts <- solve_MVSK_nloptr_non_parametric(lambda, X_moments, w0)
L_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "L-MVSK")
L_MVSK_result
L_MVSK_result$w - nlopt_resluts$w_optimal
L_MVSK_result$objfun_vs_iterations
nlopt_resluts$obj_optimal
-3.488067e-04 + 0.0003488076
args(solve_MVSK_non_parametric)
expect_equal(L_MVSK_result$w, nlopt_resluts$w_optimal)
expect_equal(L_MVSK_result$w, nlopt_resluts$w_optimal, tolerance = 1e-4)
expect_equal(L_MVSK_result$w, nlopt_resluts$w_optimal, tolerance = 1e-3)
min(nlopt_resluts$w_optimal)
min(L_MVSK_result$w)
library(ParametricHighOrderPortfolios)
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_moments <- estimate_moments(X)
lambda <- c(1, 4, 10, 20)
nlopt_resluts <- solve_MVSK_nloptr_non_parametric(lambda, X_moments, w0)
L_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "L-MVSK", maxiter = 10000)
L_MVSK_result$w
expect_equal(L_MVSK_result$w, nlopt_resluts$w_optimal, tolerance = 1e-3)
L_MVSK_result$objfun_vs_iterations[-1,]
L_MVSK_result$objfun_vs_iterations[-1]
L_MVSK_result$objfun_vs_iterations
min(L_MVSK_result$objfun_vs_iterations)
end(L_MVSK_result$objfun_vs_iterations)
tail(L_MVSK_result$objfun_vs_iterations, 1)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-5)
Q_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "Q-MVSK", maxiter = 10000)
Q_MVSK_result$w - nlopt_resluts$w_optimal
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
expect_equal(tail(Q_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-5)
tail(Q_MVSK_result$objfun_vs_iterations, 1)- nlopt_resluts$obj_optimal
expect_equal(tail(Q_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
args(solve_MVSK_non_parametric)
DC_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "DC", maxiter = 10000)
expect_equal(tail(DC_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-5)
DC_result
DC_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "DC", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(DC_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-5)
L_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "L-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
L_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "L-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
Q_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "Q-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(Q_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
DC_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "DC", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(DC_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
args(solve_MVSK_non_parametric)
PGD_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "PGD", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(PGD_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
RFPA_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "RFPA", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(RFPA_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
RFPA_result
RFPA_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "RFPA", maxiter = 10000, ftol = 1e-9, wtol = 1e-9, tau = 100)
expect_equal(tail(RFPA_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
use_test()
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_parameters <- fit_ghMST(X)
lambda <- c(1, 4, 10, 20)
nlopt_resluts <- solve_MVSK_nloptr_skewt(w0, lambda, X_parameters)
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_parameters <- fit_ghMST(X)
lambda <- c(1, 4, 10, 20)
nlopt_resluts <- solve_MVSK_nloptr_skewt(w0, lambda, X_parameters)
L_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "L-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
Q_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "Q-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(Q_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
DC_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "DC", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(DC_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
PGD_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "PGD", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(PGD_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
RFPA_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "RFPA", maxiter = 10000, ftol = 1e-9, wtol = 1e-9, tau = 100)
expect_equal(tail(RFPA_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
nlopt_resluts
L_MVSK_result
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
tail(L_MVSK_result$objfun_vs_iterations, 1)
nlopt_resluts$obj_optimal
nlopt_resluts <- solve_MVSK_nloptr_skewt(w0, lambda, X_parameters)
L_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "L-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
nlopt_resluts$w_optimal
L_MVSK_result$w
library(ParametricHighOrderPortfolios)
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_parameters <- fit_ghMST(X)
lambda <- c(1, 4, 10, 20)
nlopt_resluts <- solve_MVSK_nloptr_skewt(w0, lambda, X_parameters)
L_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "L-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
Q_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "Q-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(Q_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
DC_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "DC", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(DC_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
PGD_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "PGD", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(PGD_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
RFPA_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "RFPA", maxiter = 10000, ftol = 1e-9, wtol = 1e-9, tau = 100)
expect_equal(tail(RFPA_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
L_MVSK_result
nlopt_resluts$w_optimal
nlopt_resluts$w_optimal - L_MVSK_result$w
obj_value_skewt <- function(w, lambda, parameters) {
obj <- 0
wT_mu <- t(w) %*% parameters$mu
wT_gamma <- t(w) %*% parameters$gamma
wT_Sigma_w <- sum((parameters$chol_Sigma %*% w) ** 2)
obj <- obj - lambda[1] * (wT_mu + parameters$a$a11 * wT_gamma)
obj <- obj + lambda[2] * (parameters$a$a21 * wT_Sigma_w  + parameters$a$a22 * ((wT_gamma)**2) )
obj <- obj - lambda[3] * (parameters$a$a31 * ((wT_gamma) ** 3) + parameters$a$a32 * (wT_gamma) * ( wT_Sigma_w) )
obj <- obj + lambda[4] * (parameters$a$a41 * ((wT_gamma) ** 4) + parameters$a$a42 * (wT_Sigma_w) * ((wT_gamma) ** 2) + parameters$a$a43 * ((wT_Sigma_w) ** 2))
return(as.numeric(obj))
}
obj_value_skewt(nlopt_resluts$w_optima, lambda, X_parameters)
obj_value_skewt(L_MVSK_result$w, lambda, X_parameters)
nlopt_resluts$obj_optimal
nlopt_resluts$w_optimal
nlopt_resluts$w_optima
nlopt_resluts$w_optimal
tail(L_MVSK_result$objfun_vs_iterations, 1)
nlopt_resluts$obj_optimal
nlopt_resluts
solve_MVSK_nloptr_skewt(w0, lambda, X_parameters)
parameters
parameters <- X_parameters
lambda
w0
lambda <- lambda/max(lambda)
library(ParametricHighOrderPortfolios)
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_parameters <- fit_ghMST(X)
lambda <- c(1, 4, 10, 20)
nlopt_resluts <- solve_MVSK_nloptr_skewt(w0, lambda, X_parameters)
L_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "L-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(L_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
Q_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "Q-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(Q_MVSK_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
DC_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "DC", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(DC_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
PGD_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "PGD", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(tail(PGD_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
RFPA_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "RFPA", maxiter = 10000, ftol = 1e-9, wtol = 1e-9, tau = 100)
expect_equal(tail(RFPA_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
PGD_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "PGD", maxiter = 10000, ftol = 1e-9, wtol = 1e-9, initial_eta = 10)
expect_equal(tail(PGD_result$objfun_vs_iterations, 1), nlopt_resluts$obj_optimal, tolerance = 1e-6)
setwd('/home/xwangew/OneDrive/Higher Order experiments')
#### MVSK
library(quadprog)
library(PerformanceAnalytics)
library(portfolioBacktest)
library(highOrderPortfolios)
library(ParametricHighOrderPortfolios)
#
#
source('auxiliary.R')
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_moments <- estimate_moments(X)
compute_tau_MM
non_para_mats <- X_moments
lambda <- c(1, 4, 10, 20)
MVSK_solve_by_SCA_non_para <- function(w0, lambda, non_para_mats, max_iter = 100, ftol = 1e-5, wtol = 1e-4) {
obj_hist_SCA <- c(obj_value(w0, lambda, non_para_mats))
cpu_time_SCA <- c(0)
start_time <- proc.time()[3]
wk <- w0
wk_old <- wk
iter <- 0
converged_time <- 0
while(iter < max_iter) {
iter <- iter + 1
tau_w <- 0
H34 <- - lambda[3] * compute_H3(wk, non_para_mats) + lambda[4] * compute_H4(wk, non_para_mats)
eigen_docom <- eigen(H34)
d <- eigen_docom$values
if(min(d)<0) {
d[which(d<0)] <- 0
H34 <- eigen_docom$vectors %*% diag(d) %*% t(eigen_docom$vectors)
}
Qk <- 2*lambda[2]*non_para_mats$Sgm + H34 + diag(tau_w, N)
qk <- lambda[1]*non_para_mats$mu + lambda[3]*as.vector(PerformanceAnalytics_derportm3(wk, non_para_mats$Phi)) - lambda[4]*as.vector(PerformanceAnalytics_derportm4(wk, non_para_mats$Psi)) + H34%*%wk + tau_w*wk
wk <- (solve.QP(Qk, qk, t(rbind(rep(1,N), diag(N))),  c(1, rep(0,N)), meq = 1))$solution
wk[which(wk<0)] <- 0
wk <- wk/sum(wk)
cpu_time_SCA <- c(cpu_time_SCA, proc.time()[3] - start_time)
obj_hist_SCA <- c(obj_hist_SCA, obj_value(wk, lambda, non_para_mats))
has_w_converged <- all(abs(wk - wk_old) <= .5 * wtol * (abs(wk) + abs(wk_old)))
has_f_converged <- abs(diff(tail(obj_hist_SCA, 2))) <= .5 * ftol * sum(abs(tail(obj_hist_SCA, 2)))
if (has_w_converged || has_f_converged) converged_time <- converged_time + 1
if (converged_time >2) break
wk_old <- wk
}
return(list("Obj_hist" = obj_hist_SCA,
"Time_hist" = cpu_time_SCA,
"w_optimal" = wk))
}
w0
MVSK_solve_by_SCA_non_para(w0, lambda, non_para_mats)
N <- 10
MVSK_solve_by_SCA_non_para(w0, lambda, non_para_mats)
solve_MVSK_non_parametric(lambda, X_moments, method = "Q-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
MVSK_solve_by_SCA_non_para(w0, lambda, non_para_mats, ftol = 1e-10, wtol = 1e-10)
w_check <- MVSK_solve_by_SCA_non_para(w0, lambda, non_para_mats, ftol = 1e-10, wtol = 1e-10)$w_optimal
save(w_check, file = "MVSK_non_parametric.RData")
setwd("~/OneDrive/Higher Order Portfolio Optimizations/Code/ParametricHighOrderPortfolios/tests/testthat")
L_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "L-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(L_MVSK_result$w, w_check, tolerance = 1e-6)
library(testthat)
expect_equal(L_MVSK_result$w, w_check, tolerance = 1e-6)
expect_equal(L_MVSK_result$w, w_check, tolerance = 1e-4)
Q_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "Q-MVSK", maxiter = 10000, ftol = 1e-9, wtol = 1e-9)
expect_equal(Q_MVSK_result$w, w_check, tolerance = 1e-6)
L_MVSK_result$w
L_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "L-MVSK", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(L_MVSK_result$w, w_check, tolerance = 1e-4)
Q_MVSK_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "Q-MVSK", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(Q_MVSK_result$w, w_check, tolerance = 1e-4)
DC_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "DC", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(DC_result$w, w_check, tolerance = 1e-4)
PGD_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "PGD", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(PGD_result$w, w_check, tolerance = 1e-4)
RFPA_result <- solve_MVSK_non_parametric(lambda, X_moments, method = "RFPA", maxiter = 10000, ftol = 1e-10, wtol = 1e-10, tau = 100)
expect_equal(RFPA_result$w, w_check, tolerance = 1e-4)
X <- X50[, 1:10]
w0 <- rep(1/10, 10)
X_parameters <- fit_ghMST(X)
X_parameters$mu
parameters <- X_parameters
MVSK_solve_by_SCA_skew_t <- function(w0, lambda, parameters, max_iter = 100, ftol = 1e-5, wtol = 1e-4) {
obj_hist_SCA_skewt <- c(obj_value_skewt(w0, lambda, parameters))
cpu_time_SCA_skewt <- c(0)
start_time <- proc.time()[3]
wk <- w0
wk_old <- wk
iter <- 0
converged_time <- 0
while(iter < max_iter) {
iter <- iter + 1
Qk <- 2 * lambda[2] * (parameters$a$a21 * parameters$scatter + parameters$a$a22 * parameters$gamma %*% t(parameters$gamma))
Qk <- Qk + lambda[3] * (parameters$a$a31 * 6 * as.numeric(t(wk) %*% parameters$gamma) * parameters$gamma %*% t(parameters$gamma) + parameters$a$a32 * (2 * parameters$gamma %*% t(wk) %*% parameters$scatter + 2 * parameters$scatter %*% wk %*% t(parameters$gamma) + 2 * as.numeric(t(wk) %*% parameters$gamma) * parameters$scatter ))
Qk <- Qk + lambda[4] * (12 * parameters$a$a41 * (as.numeric(t(wk) %*% parameters$gamma)**2) * parameters$gamma %*% t(parameters$gamma)  + 2 * parameters$a$a42 * (2 * as.numeric(t(wk) %*% parameters$gamma) * parameters$scatter %*% wk %*% t(parameters$gamma) + ((as.numeric(t(wk) %*% parameters$gamma))**2) * parameters$scatter + 2 * as.numeric(t(wk) %*% parameters$gamma) * parameters$gamma %*% t(wk) %*% parameters$scatter + as.numeric(t(wk) %*% parameters$scatter %*% wk) * parameters$gamma %*% t(parameters$gamma)    ) + 4 * parameters$a$a43 * (as.numeric(t(wk) %*% parameters$scatter %*% wk) * parameters$scatter + 2 * parameters$scatter %*% wk %*% t(wk) %*% parameters$scatter))
eigen_docom <- eigen(Qk)
d <- eigen_docom$values
if(min(d)<0) {
d[which(d<0)] <- 0
Qk <- eigen_docom$vectors %*% diag(d) %*% t(eigen_docom$vectors) + tau_w * diag(N)
}
wk <- (solve.QP(Qk/norm(Qk,"2"),( - nabla_f_skewt(wk, lambda, parameters) + Qk %*% wk)/norm(Qk,"2"), t(rbind(rep(1,N), diag(N))),  c(1, rep(0,N)), meq = 1))$solution
wk[which(wk<0)] <- 0
wk <- wk/sum(wk)
cpu_time_SCA_skewt <- c(cpu_time_SCA_skewt, proc.time()[3] - start_time)
obj_hist_SCA_skewt <- c(obj_hist_SCA_skewt, obj_value_skewt(wk, lambda, parameters))
has_w_converged <- all(abs(wk - wk_old) <= .5 * wtol * (abs(wk) + abs(wk_old)))
has_f_converged <- abs(diff(tail(obj_hist_SCA_skewt, 2))) <= .5 * ftol * sum(abs(tail(obj_hist_SCA_skewt, 2)))
if (has_w_converged || has_f_converged) converged_time <- converged_time + 1
if (converged_time >2) break
wk_old <- wk
}
return(list("Obj_hist" = obj_hist_SCA_skewt,
"Time_hist" = cpu_time_SCA_skewt,
"w_optimal" = wk))
}
MVSK_solve_by_SCA_skew_t(w0, lambda, parameters)
MVSK_solve_by_SCA_skew_t(w0, lambda, parameters, ftol = 1e-10, wtol = 1e-10)
w_check <- MVSK_solve_by_SCA_skew_t(w0, lambda, parameters, ftol = 1e-10, wtol = 1e-10)$MVSK_solve_by_SCA_skew_t
getwd()
save(w_check, file = "MVSK_skew_t.RData")
L_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "L-MVSK", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(L_MVSK_result$w, w_check, tolerance = 1e-4)
Q_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "Q-MVSK", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(Q_MVSK_result$w, w_check, tolerance = 1e-4)
L_MVSK_result
w_check
w_check <- MVSK_solve_by_SCA_skew_t(w0, lambda, parameters, ftol = 1e-10, wtol = 1e-10)$MVSK_solve_by_SCA_skew_t
w_check
w_check <- MVSK_solve_by_SCA_skew_t(w0, lambda, parameters, ftol = 1e-10, wtol = 1e-10)$w_optimal
w_check
save(w_check, file = "MVSK_skew_t.RData")
L_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "L-MVSK", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(L_MVSK_result$w, w_check, tolerance = 1e-4)
Q_MVSK_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "Q-MVSK", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(Q_MVSK_result$w, w_check, tolerance = 1e-4)
DC_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "DC", maxiter = 10000, ftol = 1e-10, wtol = 1e-10)
expect_equal(DC_result$w, w_check, tolerance = 1e-4)
PGD_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "PGD", maxiter = 10000, ftol = 1e-10, wtol = 1e-10, initial_eta = 10)
expect_equal(PGD_result$w, w_check, tolerance = 1e-4)
RFPA_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "RFPA", maxiter = 10000, ftol = 1e-10, wtol = 1e-10, tau = 100)
expect_equal(RFPA_result$w, w_check, tolerance = 1e-4)
PGD_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "PGD", maxiter = 10000, ftol = 1e-10, wtol = 1e-10, initial_eta = 1)
expect_equal(PGD_result$w, w_check, tolerance = 1e-4)
PGD_result <- solve_MVSK_skew_t(lambda, X_parameters, method = "PGD", maxiter = 10000, ftol = 1e-10, wtol = 1e-10, initial_eta = 100)
expect_equal(PGD_result$w, w_check, tolerance = 1e-4)
PGD_result
library(ParametricHighOrderPortfolios)
library(ParametricHighOrderPortfolios)
library(ParametricHighOrderPortfolios)
